a) Here's an example of an update and delete trigger on the clientmstr table to
keep track of records being updated or deleted and store the old values in an
audit_trade table using both row-level and statement-level triggers:
-- Row-level update trigger
CREATE OR REPLACE TRIGGER clientmstr_update_row
AFTER UPDATE ON clientmstr FOR EACH ROW
BEGIN
IF :OLD.column_to_track IS NOT NULL THEN
INSERT INTO audit_trade (old_value, operation_type, timestamp)
VALUES (:OLD.column_to_track, 'UPDATE', SYSTIMESTAMP);
END IF;
END;
/
-- Statement-level delete trigger
CREATE OR REPLACE TRIGGER clientmstr_delete_stmt
AFTER DELETE ON clientmstr
DECLARE
v_old_value clientmstr.column_to_track%TYPE;
BEGIN
SELECT column_to_track
INTO v_old_value
FROM clientmstr
WHERE PRIMARY_KEY_COLUMN = :OLD.PRIMARY_KEY_COLUMN; -- Replace with the
actual primary key column
IF v_old_value IS NOT NULL THEN
INSERT INTO audit_trade (old_value, operation_type, timestamp)
VALUES (v_old_value, 'DELETE', SYSTIMESTAMP);
END IF;
END;
/
b) Here's a before trigger for insert and update events on the Emp table to check and
reject salary values less than Rs. 50,000 and store the new values in a Tracking table:
-- Before insert and update trigger
CREATE OR REPLACE TRIGGER emp_salary_check
BEFORE INSERT OR UPDATE ON Emp
FOR EACH ROW
DECLARE
v_new_salary NUMBER := :NEW.salary;
BEGIN
IF v_new_salary < 50000 THEN
-- Reject the insert or update
RAISE_APPLICATION_ERROR(-20001, 'Salary less than Rs. 50,000 is not allowed.');
ELSE
-- Insert the new values into the Tracking table
INSERT INTO Tracking (e_no, salary)
VALUES (:NEW.e_no, v_new_salary);
END IF;
END;
/
