import pandas as pd

import numpy as np

df = pd.read_csv("/Users/kaustubhshinde/Downloads/uber.csv")

df

df.describe()

df.dtypes

df.info()

df.isnull().sum()

df["dropoff_longitude"] = df["dropoff_longitude"].ffill()

df["dropoff_latitude"] = df["dropoff_latitude"].ffill()

df = df.drop(columns = ["key", "Unnamed: 0"])

df["pickup_datetime"] = pd.to_datetime(df["pickup_datetime"])

df.dtypes

from haversine import haversine, Unit

 #haversine is used to calculate the shortest distance betweeen two longitude and latitude 

df = df[(df['pickup_longitude'].between(-180, 180)) &          #removing out of range values
        (df['pickup_latitude'].between(-90, 90)) &
        (df['dropoff_longitude'].between(-180, 180)) & 
        (df['dropoff_latitude'].between(-90, 90))]

df["distance"] = df.apply(lambda row: haversine(               #using hoversine to calculate distances
    (row["pickup_latitude"],row["pickup_longitude"]),
    (row["dropoff_latitude"], row["dropoff_longitude"])
     ,unit=Unit.KILOMETERS), axis=1)

df

import seaborn as sns

sns.scatterplot(data = df, x = df["fare_amount"], y = df["distance"])

df = df[(df["distance"].between(0, 50))&
        (df["fare_amount"].between(0, 200))]

sns.scatterplot(data = df, x = df["fare_amount"], y = df["distance"])

df1 = df.drop(columns = ['pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'passenger_count'])

df1.corr()

x=df["distance"] 
y=df["fare_amount"]
x = x.values.reshape(-1, 1)
y = y.values.reshape(-1, 1) # ye basically 2d array bana raha hai

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state= 42)

from sklearn.linear_model import LinearRegression

lr = LinearRegression()

lr.fit(x_train, y_train)


y_pred = lr.predict(x_test)

y_pred

from sklearn.ensemble import RandomForestRegressor

rf = RandomForestRegressor(n_estimators = 100, random_state = 42)

rf.fit(x_train, y_train.ravel())  # using ravel we are making it 1d array because generally the y_train attribute of rf needs one d array as input


y_pred = rf.predict(x_test)

from sklearn.metrics import mean_squared_error

mac = mean_squared_error(y_pred, y_test)

print(mac)

rac = np.sqrt(mean_squared_error(y_pred, y_test))

print (rac)

