Here is a PL/SQL block that handles the attendance check for a student's roll
number:
DECLARE
v_roll_number NUMBER;
v_attendance NUMBER;
v_status CHAR(1);
BEGIN
-- Prompt the user to enter a roll number
v_roll_number := &Enter_Roll_Number;
-- Query the Stud table to get the attendance for the provided roll number
SELECT Att, Status INTO v_attendance, v_status
FROM Stud
WHERE Roll = v_roll_number;
-- Check attendance and update status
IF v_attendance < 75 THEN
DBMS_OUTPUT.PUT_LINE('Term not granted');
v_status := 'D';
ELSE
DBMS_OUTPUT.PUT_LINE('Term granted');
v_status := 'ND';
END IF;
-- Update the status in the Stud table
UPDATE Stud
SET Status = v_status
WHERE Roll = v_roll_number;
COMMIT;
EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('Roll number not found in the Stud table.');
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;
Here is a PL/SQL block that handles the user-defined exception for account
balance:
DECLARE
v_account_balance NUMBER := 1000; -- Initial balance (example)
v_withdrawal_amount NUMBER := 2000; -- Example withdrawal amount
v_error_msg VARCHAR2(100);
-- Define a user-defined exception
insuff_funds EXCEPTION;
-- Handler for the user-defined exception
PRAGMA EXCEPTION_INIT(insuff_funds, -20000);
BEGIN
-- Check if withdrawal amount is more than the current balance
IF v_withdrawal_amount > v_account_balance THEN
v_error_msg := 'Insufficient funds for withdrawal';
RAISE_APPLICATION_ERROR(-20000, v_error_msg);
ELSE
-- Update the balance after a successful withdrawal
v_account_balance := v_account_balance - v_withdrawal_amount;
DBMS_OUTPUT.PUT_LINE('Withdrawal successful. New balance: ' || v_account_balance);
END IF;
EXCEPTION
WHEN insuff_funds THEN
DBMS_OUTPUT.PUT_LINE(SQLERRM);
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;
